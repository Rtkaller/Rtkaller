// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE 

#include <endian.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>

uint64_t r[3] = {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff};

int main(void)
{
		syscall(__NR_mmap, 0x1ffff000ul, 0x1000ul, 0ul, 0x32ul, -1, 0ul);
	syscall(__NR_mmap, 0x20000000ul, 0x1000000ul, 7ul, 0x32ul, -1, 0ul);
	syscall(__NR_mmap, 0x21000000ul, 0x1000ul, 0ul, 0x32ul, -1, 0ul);
				intptr_t res = 0;
memcpy((void*)0x20000000, "./file0\000", 8);
	res = syscall(__NR_creat, 0x20000000ul, 0ul);
	if (res != -1)
		r[0] = res;
	res = syscall(__NR_epoll_create1, 0ul);
	if (res != -1)
		r[1] = res;
	res = syscall(__NR_dup3, r[0], r[1], 0ul);
	if (res != -1)
		r[2] = res;
memcpy((void*)0x200000c0, "./file0\000", 8);
memcpy((void*)0x20000100, "9p\000", 3);
memcpy((void*)0x20000140, "trans=fd,", 9);
memcpy((void*)0x20000149, "rfdno", 5);
*(uint8_t*)0x2000014e = 0x3d;
sprintf((char*)0x2000014f, "0x%016llx", (long long)r[2]);
*(uint8_t*)0x20000161 = 0x2c;
memcpy((void*)0x20000162, "wfdno", 5);
*(uint8_t*)0x20000167 = 0x3d;
sprintf((char*)0x20000168, "0x%016llx", (long long)r[0]);
*(uint8_t*)0x2000017a = 0x2c;
memcpy((void*)0x2000017b, "cache=loose", 11);
*(uint8_t*)0x20000186 = 0x2c;
memcpy((void*)0x20000187, "cachetag", 8);
*(uint8_t*)0x2000018f = 0x3d;
memcpy((void*)0x20000190, "$", 1);
*(uint8_t*)0x20000191 = 0x2c;
memcpy((void*)0x20000192, "fscache", 7);
*(uint8_t*)0x20000199 = 0x2c;
memcpy((void*)0x2000019a, "fowner", 6);
*(uint8_t*)0x200001a0 = 0x3d;
sprintf((char*)0x200001a1, "%020llu", (long long)0);
*(uint8_t*)0x200001b5 = 0x2c;
*(uint8_t*)0x200001b6 = 0;
	syscall(__NR_mount, 0ul, 0x200000c0ul, 0x20000100ul, 0x80cul, 0x20000140ul);
	return 0;
}
